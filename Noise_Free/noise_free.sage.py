
# This file was *autogenerated* from the file noise_free.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0p75 = RealNumber('0.75'); _sage_const_160 = Integer(160)
import numpy as np
from fpylll import *
def sort(S):
    pass


def createCVP(S, n, l_a, l_b, l_c, q):
    
    B = np.zeros((_sage_const_2 *n, _sage_const_2 *n))
    
    I = np.identity(n+_sage_const_1 )
    B[:n+_sage_const_1 , :n+_sage_const_1 ] = I
    
    qI = q*np.identity(n-_sage_const_1 )
    B[n+_sage_const_1 :, n+_sage_const_1 :] = qI
    
    W = []
    return B, v

def CVP2SVP(B, t, n, q):

    B_dash = np.zeros((n+_sage_const_1 , n+_sage_const_1 ))
    B_dash[:, :-_sage_const_1 ] = B
    B[-_sage_const_1 , :-_sage_const_1 ] = t
    B[-_sage_const_1 ][-_sage_const_1 ] = q
    
    return B_dash
    
def identify_and_sort(listOfTriplet):
    pass

def findKey(listOfTriplet, correctKey, q):
    S = []  # will store the listed list of EKOs
    S = identify_and_sort(listOfTriplet)
    
    total_leaked_bits = _sage_const_0 
    gamma_min = _sage_const_0 
    for i in S:
        total_leaked_bits += S[]
        gamma_min += _sage_const_1 
        if total_leaked_bits >= _sage_const_160 :
            break

    keyNotFound = True
    i = gamma_min
    maxIter = len(S)
    computedKey = _sage_const_0 
    while i <= maxIter and keyNotFound == True:
        # create an SVP instance using the top i EKOs from S
        cvpBasis, v = createCVP(S, i, l_a, l_b, l_c, q)
        cvpBasis = [map(ZZ,i) for i in cvpBasis]
        cvpBasis = matrix(cvpBasis)
        v = [map(ZZ, i) for i in v]
        reducedBasis = cvpBasis.LLL( delta=_sage_const_0p75 )

        # svpBasis = CVP2SVP(cvpBasis, v, 2*i, q)
        # Solve the SVP instance, compute the DSA private key
        result = Babai(reducedBasis, v)
        computedKey = compute_key(result, S)
        # Verify the correctness
        if computedKey == correctKey:
            keyNotFound = False
        else:
            i = i+_sage_const_1 

    return computedKey


if __name__ == "__main__": 
    findKey(listOfTriplets, correctKey, q)

